include(CheckCXXCompilerFlag)
include(CheckCCompilerFlag)

## ctulu_target_warning_from_file(target_name warning_file)
## Add warnings from file to the given target.
#   {value}  [in] target_name:      Name of the target
#   {value}  [in] warning_file:     File where the warning are.
#                                   If the file is updated, cmake when a new build is launched.
function(ctulu_target_warning_from_file target_name warning_file)
    get_filename_component(warning_filename ${warning_file} NAME)
    configure_file(${warning_file} ${CMAKE_BINARY_DIR}/ctulu/${warning_filename} COPYONLY)
    file(STRINGS ${warning_file} warning_file_content)
    set(configurations)
    set(languages)

    message(STATUS "Ctulu -- Stating parsing warnings in \"${warning_file}\"")
    foreach(line ${warning_file_content})
        # 'begin-line' 'spaces*' [ 'spaces*' 'string' 'spaces*' 'number' ] 'spaces*' 'end-line'
        string(REGEX MATCH "^[ ]*\\[[ ]*([A-Za-z0-9_]*)[ ]*[ ]*][ ]*$" tmp_line ${line})
        if(tmp_line)
            if(compiler)
                message(STATUS "Ctulu -- Parsing warnings for \"${compiler}\" finished")
            endif()
            message(STATUS "Ctulu -- Parsing warnings for \"${CMAKE_MATCH_1}\"")
            set(compiler ${CMAKE_MATCH_1})
            continue()
        else()
            if(NOT DEFINED warning_printed AND NOT DEFINED compiler)
                message(WARNING "Ctulu -- Please specify compiler first.\nLines will be ignored until compiler is specified.")
                set(warning_printed ON)
            endif()
        endif()

        # 'begin-line' 'spaces*' [ 'spaces*' 'string*' 'spaces*' level 'spaces*' 'number' ] 'spaces*' 'end-line'
        string(REGEX MATCH "^[ ]*\\[[ ]*([A-Za-z0-9_;]*)[ ]*level[ ]*([0-9]*)[ ]*[:]?[ ]*([A-Za-z0-9_;]*)[ ]*][ ]*$" tmp_line ${line})
        if(tmp_line)
            set(list_to_inserts)
            set(current_languages ${CMAKE_MATCH_1})
            set(warning_level ${CMAKE_MATCH_2})
            set(build_type_list ${CMAKE_MATCH_3})

            if(NOT current_languages)
                set(current_languages c cxx)
            endif()

            foreach(language ${current_languages})
                if(NOT ${language} IN_LIST languages)
                    list(APPEND languages ${language})
                endif()

                foreach(build_type ${build_type_list})
                    string(TOUPPER ${build_type} build_type)
                    if(NOT ${build_type} IN_LIST configurations)
                        list(APPEND configurations ${build_type})
                    endif()
                    if(NOT ${warning_level} IN_LIST ctulu_${target_name}_${compiler}_${language}_${build_type}_warnings_levels)
                        list(APPEND ctulu_${target_name}_${compiler}_${language}_${build_type}_warnings_levels ${warning_level})
                    endif()

                    list(APPEND list_to_inserts ctulu_${target_name}_${compiler}_${language}_${build_type}_warnings_level_${warning_level})
                endforeach()
            endforeach()
        else()
            string(REGEX MATCH "^[ ]*#" tmp_line ${line})
            if(NOT tmp_line)
                string(STRIP ${line} line)
                foreach(list ${list_to_inserts})
                    list(APPEND ${list} ${line})
                endforeach()
            endif()
        endif()
    endforeach()
    if(compiler)
        message(STATUS "Ctulu -- Parsing warnings for \"${compiler}\" finished")
    endif()
    message(STATUS "Ctulu -- Parsing finished")

    foreach(language ${languages})
        foreach(configuration ${configurations})
            foreach(it ${ctulu_${target_name}_gcc_${language}_${configuration}_warnings_levels})
                if(ctulu_${target_name}_warning_level GREATER_EQUAL it)
                    foreach(warning ${ctulu_${target_name}_gcc_${language}_${configuration}_warnings_level_${it}})
                        ctulu_target_compiler_flag(${target_name} ${warning} ${language} ${configuration})
                    endforeach()
                endif()
            endforeach()
        endforeach()
    endforeach()
endfunction()
